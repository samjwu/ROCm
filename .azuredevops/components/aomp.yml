parameters:
- name: checkoutRepo
  type: string
  default: 'self'
- name: checkoutRef
  type: string
  default: ''
# reference:
# https://github.com/ROCm/aomp/blob/aomp-dev/docs/SOURCEINSTALL_PREREQUISITE.md
- name: aptPackages
  type: object
  default:
    - cmake
    - python3-pip
    - ninja-build
    - pkg-config
    - libpci-dev
    - libnuma-dev
    - libffi-dev
    - git
    - libopenmpi-dev
    - gawk
    - mesa-common-dev
    - libtool
    - libdrm-amdgpu1
    - libdrm-dev
    - libdw-dev
    - libgtest-dev
    - libsystemd-dev
    - libssl-dev
    - libstdc++-12-dev
    - ccache
    - libgmp-dev
    - libmpfr-dev
    - texinfo
    - libbison-dev
    - bison
    - flex
    - libbabeltrace-dev
    - libncurses5-dev
    - liblzma-dev
    - python3-setuptools
    - python3-dev
    - libudev-dev
    - parallel
  # Referencing comment snippet below but excluding rocprofiler and roctracer.
  # This is to remove need for separate build per gpu target.
  # With our selected build flags, compilation and installation work fine without these two.
  #
  # snippet from https://github.com/ROCm/aomp/blob/aomp-dev/bin/build_aomp.sh#L131-L134
  #
  # For ROCM build (AOMP_STANDALONE_BUILD=0) the components roct, rocr,
  # libdevice, project, comgr, rocminfo, hipamd, rocdbgapi, rocgdb,
  # roctracer, rocprofiler, rocm_smi_lib, and amdsmi should be found
  # in ROCM in /opt/rocm.  The ROCM build only needs these components:
- name: rocmDependencies
  type: object
  default:
    - amdsmi
    - clr
    - llvm-project
    - ROCdbgapi
    - ROCgdb
    - rocm-cmake
    - rocm-core
    - rocminfo
    - rocm_smi_lib
    - rocprofiler-register
    - ROCR-Runtime
    - roctracer

jobs:
- job: aomp
  variables:
  - group: common
  - template: /.azuredevops/variables-global.yml
  pool: ${{ variables.MEDIUM_BUILD_POOL }}
  workspace:
    clean: all
  steps:
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/dependencies-other.yml
    parameters:
      aptPackages: ${{ parameters.aptPackages }}
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/preamble.yml
# checkout the repos tied to openmp-extras, plus llvm-project
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/checkout.yml
    parameters:
      checkoutRepo: ${{ parameters.checkoutRepo }}
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/checkout.yml
    parameters:
      checkoutRepo: aomp-extras_repo
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/checkout.yml
    parameters:
      checkoutRepo: flang_repo
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/checkout.yml
    parameters:
      checkoutRepo: llvm-project_repo
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/dependencies-rocm.yml
    parameters:
      dependencyList: ${{ parameters.rocmDependencies }}
      # CI case: download latest default branch build
      ${{ if eq(parameters.checkoutRef, '') }}:
        dependencySource: staging
      # manual build case: triggered by ROCm/ROCm repo
      ${{ elseif ne(parameters.checkoutRef, '') }}:
        dependencySource: tag-builds
# Because clang is not being rebuilt and to separate downloaded ROCm
# dependencies from the new artifacts, we use temporary symbolic links
# for the compilation and installation to go through.
  - script: |
      sudo ln -s $(Agent.BuildDirectory)/rocm /opt/rocm
      mkdir -p $(Build.BinariesDirectory)/bin
      ln -s $(Agent.BuildDirectory)/rocm/llvm/bin/clang $(Build.BinariesDirectory)/bin/clang
      ln -s $(Agent.BuildDirectory)/rocm/llvm/bin/clang++ $(Build.BinariesDirectory)/bin/clang++
      ln -s $(Agent.BuildDirectory)/rocm/llvm/bin/llvm-config $(Build.BinariesDirectory)/bin/llvm-config
      ln -s $(Agent.BuildDirectory)/rocm/llvm $(Build.BinariesDirectory)/llvm
    displayName: Extra build environment setup
# We follow the sequence described in the aomp repo instructions
# https://github.com/ROCm/aomp/blob/aomp-dev/docs/SOURCEINSTALL.md
# But instead of calling build_aomp.sh directly, we have to split up the calls to build each component
# in order for the omp.h header file to be both be published as an artifact,
# and be found when building subsequent components.
# Environment variables specified per bash script were determined from looking through the
# individual scripts and iteratively testing compilation.
# Splitting up the build_aomp.sh call is also easier for debugging within Azure, as the former
# method leads to a giant build log compared to separate logs per script call.
#
# Components compiled and the order for non-standalone build found at
# https://github.com/ROCm/aomp/blob/aomp-dev/bin/build_aomp.sh#L135-L143
  - task: Bash@3
    displayName: Build Prereq
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_prereq.sh
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
  - task: Bash@3
    displayName: Build extras
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_extras.sh
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_USE_NINJA: 1
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
      INSTALL_EXTRAS: $(Build.BinariesDirectory)
  - task: Bash@3
    displayName: Install extras
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_extras.sh
      arguments: install
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_USE_NINJA: 1
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
      INSTALL_EXTRAS: $(Build.BinariesDirectory)
  - task: Bash@3
    displayName: Build openmp
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_openmp.sh
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_BUILD_SANITIZER: 0
      AOMP_BUILD_DEBUG: 0
      AOMP_LEGACY_OPENMP: 1
      AOMP_USE_NINJA: 1
      ALTAOMP: $(Agent.BuildDirectory)/rocm/llvm
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      LLVM_PROJECT_ROOT: $(Build.SourcesDirectory)/llvm-project
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
      INSTALL_OPENMP: $(Build.BinariesDirectory)
  - task: Bash@3
    displayName: Install openmp
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_openmp.sh
      arguments: install
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_BUILD_SANITIZER: 0
      AOMP_BUILD_DEBUG: 0
      AOMP_LEGACY_OPENMP: 1
      AOMP_USE_NINJA: 1
      ALTAOMP: $(Agent.BuildDirectory)/rocm/llvm
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      LLVM_PROJECT_ROOT: $(Build.SourcesDirectory)/llvm-project
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
      INSTALL_OPENMP: $(Build.BinariesDirectory)
  - script: ln -s $(Build.BinariesDirectory)/include/omp.h $(Build.SourcesDirectory)/llvm-project/llvm/include/omp.h
    displayName: Link omp header
  - task: Bash@3
    displayName: Build offload
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_offload.sh
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_BUILD_SANITIZER: 0
      AOMP_BUILD_DEBUG: 0
      AOMP_LEGACY_OPENMP: 1
      AOMP_USE_NINJA: 1
      ALTAOMP: $(Agent.BuildDirectory)/rocm/llvm
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      LLVM_PROJECT_ROOT: $(Build.SourcesDirectory)/llvm-project
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
      INSTALL_OPENMP: $(Build.BinariesDirectory)
  - task: Bash@3
    displayName: Install offload
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_offload.sh
      arguments: install
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_BUILD_SANITIZER: 0
      AOMP_BUILD_DEBUG: 0
      AOMP_LEGACY_OPENMP: 1
      AOMP_USE_NINJA: 1
      ALTAOMP: $(Agent.BuildDirectory)/rocm/llvm
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      LLVM_PROJECT_ROOT: $(Build.SourcesDirectory)/llvm-project
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
      INSTALL_OPENMP: $(Build.BinariesDirectory)
  - task: Bash@3
    displayName: Build flang-legacy
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_flang-legacy.sh
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_BUILD_SANITIZER: 0
      AOMP_BUILD_DEBUG: 0
      AOMP_USE_NINJA: 1
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      LLVM_PROJECT_ROOT: $(Build.SourcesDirectory)/llvm-project
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
  - task: Bash@3
    displayName: Install flang-legacy
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_flang-legacy.sh
      arguments: install
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_BUILD_SANITIZER: 0
      AOMP_BUILD_DEBUG: 0
      AOMP_USE_NINJA: 1
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      LLVM_PROJECT_ROOT: $(Build.SourcesDirectory)/llvm-project
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
  - task: Bash@3
    displayName: Build pgmath
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_pgmath.sh
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_BUILD_SANITIZER: 0
      AOMP_BUILD_DEBUG: 0
      AOMP_USE_NINJA: 1
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      LLVM_PROJECT_ROOT: $(Build.SourcesDirectory)/llvm-project
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
      INSTALL_FLANG: $(Build.BinariesDirectory)
  - task: Bash@3
    displayName: Install pgmath
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_pgmath.sh
      arguments: install
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_BUILD_SANITIZER: 0
      AOMP_BUILD_DEBUG: 0
      AOMP_USE_NINJA: 1
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      LLVM_PROJECT_ROOT: $(Build.SourcesDirectory)/llvm-project
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
      INSTALL_FLANG: $(Build.BinariesDirectory)
  - task: Bash@3
    displayName: Build flang
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_flang.sh
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_BUILD_SANITIZER: 0
      AOMP_BUILD_DEBUG: 0
      AOMP_USE_NINJA: 1
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      LLVM_PROJECT_ROOT: $(Build.SourcesDirectory)/llvm-project
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
      INSTALL_FLANG: $(Build.BinariesDirectory)
  - task: Bash@3
    displayName: Install flang
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_flang.sh
      arguments: install
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_BUILD_SANITIZER: 0
      AOMP_BUILD_DEBUG: 0
      AOMP_USE_NINJA: 1
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      LLVM_PROJECT_ROOT: $(Build.SourcesDirectory)/llvm-project
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
      INSTALL_FLANG: $(Build.BinariesDirectory)
  - task: Bash@3
    displayName: Build flang_runtime
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_flang_runtime.sh
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_BUILD_SANITIZER: 0
      AOMP_BUILD_DEBUG: 0
      AOMP_USE_NINJA: 1
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      LLVM_PROJECT_ROOT: $(Build.SourcesDirectory)/llvm-project
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
      INSTALL_FLANG: $(Build.BinariesDirectory)
  - task: Bash@3
    displayName: Install flang_runtime
    inputs:
      filePath: $(Build.SourcesDirectory)/aomp/bin/build_flang_runtime.sh
      arguments: install
    env:
      AOMP_REPOS: $(Build.SourcesDirectory)
      AOMP_PROJECT_REPO_NAME: llvm-project
      AOMP_STANDALONE_BUILD: 0
      AOMP_BUILD_SANITIZER: 0
      AOMP_BUILD_DEBUG: 0
      AOMP_USE_NINJA: 1
      INSTALL_PREFIX: $(Build.BinariesDirectory)
      CMAKE_INSTALL_PREFIX: $(Build.BinariesDirectory)
      LLVM_PROJECT_ROOT: $(Build.SourcesDirectory)/llvm-project
      AOMP: $(Build.BinariesDirectory)
      AOMP_INSTALL_DIR: $(Build.BinariesDirectory)
      INSTALL_FLANG: $(Build.BinariesDirectory)
# Clean up build environment before publish artifact
  - script: |
      rm $(Build.BinariesDirectory)/bin/clang
      rm $(Build.BinariesDirectory)/bin/clang++
      rm $(Build.BinariesDirectory)/bin/llvm-config
      rm $(Build.BinariesDirectory)/llvm
    displayName: Remove temporary symbolic links
# Copy the files to artifact staging temporarily to clean up binaries directory
# and then copy files back to llvm subdirectory in the cleaned up binaries directory
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-prepare-package.yml
    parameters:
      sourceDir: $(Build.BinariesDirectory)
      targetDir: $(Build.ArtifactStagingDirectory)
  - task: DeleteFiles@1
    displayName: 'Cleanup Binaries Directory'
    inputs:
      SourceFolder: '$(Build.BinariesDirectory)'
      Contents: '/**/*'
      RemoveDotFiles: true
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-prepare-package.yml
    parameters:
      sourceDir: $(Build.ArtifactStagingDirectory)
      targetDir: $(Build.BinariesDirectory)/llvm
  - task: DeleteFiles@1
    displayName: 'Cleanup Staging Directory'
    inputs:
      SourceFolder: $(Build.ArtifactStagingDirectory)
      Contents: '/**/*'
      RemoveDotFiles: true
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-upload.yml

- job: aomp_testing
  dependsOn: aomp
  condition: and(succeeded(), eq(variables.ENABLE_GFX942_TESTS, 'true'))
  variables:
  - group: common
  - template: /.azuredevops/variables-global.yml
  pool: $(JOB_TEST_POOL)
  workspace:
    clean: all
  strategy:
    matrix:
      gfx942:
        JOB_GPU_TARGET: gfx942
        JOB_TEST_POOL: ${{ variables.GFX942_TEST_POOL }}
  steps:
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/dependencies-other.yml
    parameters:
      aptPackages: ${{ parameters.aptPackages }}
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/preamble.yml
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/local-artifact-download.yml
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/dependencies-rocm.yml
    parameters:
      dependencyList: ${{ parameters.rocmDependencies }}
      ${{ if eq(parameters.checkoutRef, '') }}:
        dependencySource: staging
      ${{ elseif ne(parameters.checkoutRef, '') }}:
        dependencySource: tag-builds
  - task: Bash@3
    displayName: ROCm symbolic link
    inputs:
      targetType: inline
      script: |
        sudo rm -rf /opt/rocm
        sudo ln -s $(Agent.BuildDirectory)/rocm /opt/rocm
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/checkout.yml
    parameters:
      checkoutRepo: ${{ parameters.checkoutRepo }}
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/checkout.yml
    parameters:
      checkoutRepo: aomp-extras_repo
# these copy steps are from the aomp prototype script for test prep
  - task: CopyFiles@2
    displayName: 'Copy AOMP contents'
    inputs:
      CleanTargetFolder: false
      SourceFolder: $(Build.SourcesDirectory)/aomp
      Contents: |
        **
        !**/.git/**
        !**/.github/**
        !**/.gitignore
      TargetFolder: $(Agent.BuildDirectory)/rocm/share/openmp-extras/tests
      retryCount: 3
  - task: CopyFiles@2
    displayName: 'Copy FileCheck'
    inputs:
      CleanTargetFolder: false
      SourceFolder: $(Agent.BuildDirectory)/rocm/llvm/bin
      Contents: FileCheck
      TargetFolder: $(Agent.BuildDirectory)/rocm/share/openmp-extras/tests/bin
      retryCount: 3
  - task: Bash@3
    displayName: Test AOMP
    continueOnError: true
    inputs:
      targetType: inline
      script: ./run_rocm_test.sh
      workingDirectory: $(Build.SourcesDirectory)/aomp/bin
    env:
      AOMP: $(Agent.BuildDirectory)/rocm/llvm
      AOMP_REPOS_TEST: $(Build.SourcesDirectory)/aomp-test
      AOMP_TEST_DIR: $(Build.SourcesDirectory)/aomp-test
      SKIP_TEST_PACKAGE: 1
      MAINLINE_BUILD: 1
      SUITE_LIST: smoke
