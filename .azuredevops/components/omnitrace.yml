# largely referenced from: https://github.com/ROCm/omnitrace/blob/main/.github/workflows/ubuntu-jammy.yml
parameters:
- name: checkoutRepo
  type: string
  default: 'self'
- name: checkoutRef
  type: string
  default: ''
- name: aptPackages
  type: object
  default:
    - autoconf
    - autotools-dev
    - bison
    - build-essential
    - bzip2
    - clang
    - cmake
    - environment-modules
    - g++-12
    - libdrm-dev
    - libfabric-dev
    - libiberty-dev
    - libpapi-dev
    - libpfm4-dev
    - libtool
    - libopenmpi-dev
    - m4
    - openmpi-bin
    - software-properties-common
    - python3-pip
    - texinfo
    - zlib1g-dev
- name: pipModules
  type: object
  default:
    - numpy
    - perfetto
    - dataclasses
- name: rocmDependencies
  type: object
  default:
    - clr
    - llvm-project
    - rccl
    - rocm-core
    - rocm_smi_lib
    - rocminfo
    - ROCR-Runtime
    - rocprofiler
    - rocprofiler-register
    - roctracer

jobs:
- job: omnitrace
  variables:
  - group: common
  - template: /.azuredevops/variables-global.yml
  pool: ${{ variables.MEDIUM_BUILD_POOL }}
  workspace:
    clean: all
  strategy:
    matrix:
      gfx942:
        JOB_GPU_TARGET: gfx942
  steps:
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/dependencies-other.yml
    parameters:
      aptPackages: ${{ parameters.aptPackages }}
      pipModules: ${{ parameters.pipModules }}
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/preamble.yml
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/checkout.yml
    parameters:
      checkoutRepo: ${{ parameters.checkoutRepo }}
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/dependencies-rocm.yml
    parameters:
      dependencyList: ${{ parameters.rocmDependencies }}
      gpuTarget: $(JOB_GPU_TARGET)
      # CI case: download latest default branch build
      ${{ if eq(parameters.checkoutRef, '') }}:
        dependencySource: staging
      # manual build case: triggered by ROCm/ROCm repo
      ${{ elseif ne(parameters.checkoutRef, '') }}:
        dependencySource: tag-builds
  - task: Bash@3
    displayName: ROCm symbolic link
    inputs:
      targetType: inline
      script: |
        sudo rm -rf /opt/rocm
        sudo ln -s $(Agent.BuildDirectory)/rocm /opt/rocm
  - task: Bash@3
    displayName: Add ROCm binaries to PATH
    inputs:
      targetType: inline
      script: echo "##vso[task.prependpath]$(Agent.BuildDirectory)/rocm/bin"
  - task: Bash@3
    displayName: Add ROCm compilers to PATH
    inputs:
      targetType: inline
      script: echo "##vso[task.prependpath]$(Agent.BuildDirectory)/rocm/llvm/bin"
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/build-cmake.yml
    parameters:
# build flags reference: https://rocm.docs.amd.com/projects/omnitrace/en/latest/install/install.html
      extraBuildFlags: >-
        -DCMAKE_PREFIX_PATH=$(Agent.BuildDirectory)/rocm
        -DOMNITRACE_BUILD_TESTING=ON
        -DOMNITRACE_BUILD_DYNINST=ON
        -DOMNITRACE_BUILD_LIBUNWIND=ON
        -DDYNINST_BUILD_TBB=ON
        -DDYNINST_BUILD_ELFUTILS=ON
        -DDYNINST_BUILD_LIBIBERTY=ON
        -DDYNINST_BUILD_BOOST=ON
        -DOMNITRACE_USE_PAPI=ON
        -DOMNITRACE_USE_MPI=ON
        -DAMDGPU_TARGETS=$(JOB_GPU_TARGET)
      multithreadFlag: -- -j32
  - task: Bash@3
    displayName: Set up omnitrace env
    inputs:
      targetType: inline
      script: source share/omnitrace/setup-env.sh
      workingDirectory: build
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/test.yml
    parameters:
      componentName: omnitrace
  - task: Bash@3
    displayName: Remove ROCm binaries from PATH
    inputs:
      targetType: inline
      script: echo "##vso[task.setvariable variable=PATH]$(echo $PATH | sed -e 's;:$(Agent.BuildDirectory)/rocm/bin;;' -e 's;^/;;' -e 's;/$;;')"
  - task: Bash@3
    displayName: Remove ROCm compilers from PATH
    inputs:
      targetType: inline
      script: echo "##vso[task.setvariable variable=PATH]$(echo $PATH | sed -e 's;:$(Agent.BuildDirectory)/rocm/llvm/bin;;' -e 's;^/;;' -e 's;/$;;')"
  - template: ${{ variables.CI_TEMPLATE_PATH }}/steps/artifact-upload.yml
    parameters:
      gpuTarget: $(JOB_GPU_TARGET)
