# download and install rocm dependencies through pipeline builds in the project
# REQUIRED
parameters:
- name: dependencyList
  type: object
  default: []
- name: dependencySource
  type: string
  default: staging
  values:
    - staging
    - mainline
    - tag-builds
    - fixed
- name: extractToMnt
  type: boolean
  default: false
# required values for fixed selection
- name: fixedPipelineIdentifier
  type: string
  default: 0
- name: fixedComponentName
  type: string
  default: ''
- name: latestFromBranch
  type: boolean
  default: true
# match case of the repo in this object for the left side of the maps
# should not need to replace these parameters
- name: stagingPipelineIdentifiers
  type: object
  default:
    AMDMIGraphX: $(AMDMIGRAPHX_PIPELINE_ID)
    amdsmi: $(AMDSMI_PIPELINE_ID)
    aomp-extras: $(AOMP_EXTRAS_PIPELINE_ID)
    aomp: $(AOMP_PIPELINE_ID)
    clr: $(CLR_PIPELINE_ID)
    composable_kernel: $(COMPOSABLE_KERNEL_PIPELINE_ID)
    half: $(HALF_PIPELINE_ID)
    HIP: $(HIP_PIPELINE_ID)
    hip-tests: $(HIP_TESTS_PIPELINE_ID)
    hipBLAS: $(HIPBLAS_PIPELINE_ID)
    hipBLAS-common: $(HIPBLAS_COMMON_PIPELINE_ID)
    hipBLASLt: $(HIPBLASLT_PIPELINE_ID)
    hipCUB: $(HIPCUB_PIPELINE_ID)
    hipFFT: $(HIPFFT_PIPELINE_ID)
    hipfort: $(HIPFORT_PIPELINE_ID)
    HIPIFY: $(HIPIFY_PIPELINE_ID)
    hipRAND: $(HIPRAND_PIPELINE_ID)
    hipSOLVER: $(HIPSOLVER_PIPELINE_ID)
    hipSPARSE: $(HIPSPARSE_PIPELINE_ID)
    hipSPARSELt: $(HIPSPARSELT_PIPELINE_ID)
    hipTensor: $(HIPTENSOR_PIPELINE_ID)
    llvm-project: $(LLVM_PROJECT_PIPELINE_ID)
    MIOpen: $(MIOpen_PIPELINE_ID)
    MIVisionX: $(MIVISIONX_PIPELINE_ID)
    omniperf: $(OMNIPERF_PIPELINE_ID)
    rccl: $(RCCL_PIPELINE_ID)
    rdc: $(RDC_PIPELINE_ID)
    rocAL: $(ROCAL_PIPELINE_ID)
    rocALUTION: $(ROCALUTION_PIPELINE_ID)
    rocBLAS: $(ROCBLAS_PIPELINE_ID)
    ROCdbgapi: $(ROCDBGAPI_PIPELINE_ID)
    rocDecode: $(ROCDECODE_PIPELINE_ID)
    rocFFT: $(ROCFFT_PIPELINE_ID)
    ROCgdb: $(ROCGDB_PIPELINE_ID)
    rocm-cmake: $(ROCM_CMAKE_PIPELINE_ID)
    rocm-core: $(ROCM_CORE_PIPELINE_ID)
    rocm-examples: $(ROCM_EXAMPLES_PIPELINE_ID)
    rocminfo: $(ROCMINFO_PIPELINE_ID)
    rocMLIR: $(ROCMLIR_PIPELINE_ID)
    ROCmValidationSuite: $(ROCMVALIDATIONSUITE_PIPELINE_ID)
    rocm_bandwidth_test: $(ROCM_BANDWIDTH_TEST_PIPELINE_ID)
    rocm_smi_lib: $(ROCM_SMI_LIB_PIPELINE_ID)
    rocPRIM: $(ROCPRIM_PIPELINE_ID)
    rocprofiler-register: $(ROCPROFILER_REGISTER_PIPELINE_ID)
    rocprofiler-sdk: $(ROCPROFILER_SDK_PIPELINE_ID)
    rocprofiler: $(ROCPROFILER_PIPELINE_ID)
    rocPyDecode: $(ROCPYDECODE_PIPELINE_ID)
    ROCR-Runtime: $(ROCR_RUNTIME_PIPELINE_ID)
    rocRAND: $(ROCRAND_PIPELINE_ID)
    rocr_debug_agent: $(ROCR_DEBUG_AGENT_PIPELINE_ID)
    rocSOLVER: $(ROCSOLVER_PIPELINE_ID)
    rocSPARSE: $(ROCSPARSE_PIPELINE_ID)
    ROCT-Thunk-Interface: $(ROCT_THUNK_INTERFACE_PIPELINE_ID)
    rocThrust: $(ROCTHRUST_PIPELINE_ID)
    roctracer: $(ROCTRACER_PIPELINE_ID)
    rocWMMA: $(ROCWMMA_PIPELINE_ID)
    rpp: $(RPP_PIPELINE_ID)
- name: taggedPipelineIdentifiers
  type: object
  default:
    AMDMIGraphX: $(AMDMIGRAPHX_TAGGED_PIPELINE_ID)
    amdsmi: $(AMDSMI_TAGGED_PIPELINE_ID)
    aomp-extras: $(AOMP_EXTRAS_TAGGED_PIPELINE_ID)
    aomp: $(AOMP_TAGGED_PIPELINE_ID)
    clr: $(CLR_TAGGED_PIPELINE_ID)
    composable_kernel: $(COMPOSABLE_KERNEL_TAGGED_PIPELINE_ID)
    half: $(HALF_TAGGED_PIPELINE_ID)
    HIP: $(HIP_TAGGED_PIPELINE_ID)
    hip-tests: $(HIP_TESTS_TAGGED_PIPELINE_ID)
    hipBLAS: $(HIPBLAS_TAGGED_PIPELINE_ID)
    hipBLAS-common: $(HIPBLAS_COMMON_TAGGED_PIPELINE_ID)
    hipBLASLt: $(HIPBLASLT_TAGGED_PIPELINE_ID)
    hipCUB: $(HIPCUB_TAGGED_PIPELINE_ID)
    hipFFT: $(HIPFFT_TAGGED_PIPELINE_ID)
    hipfort: $(HIPFORT_TAGGED_PIPELINE_ID)
    HIPIFY: $(HIPIFY_TAGGED_PIPELINE_ID)
    hipRAND: $(HIPRAND_TAGGED_PIPELINE_ID)
    hipSOLVER: $(HIPSOLVER_TAGGED_PIPELINE_ID)
    hipSPARSE: $(HIPSPARSE_TAGGED_PIPELINE_ID)
    hipSPARSELt: $(HIPSPARSELT_TAGGED_PIPELINE_ID)
    hipTensor: $(HIPTENSOR_TAGGED_PIPELINE_ID)
    llvm-project: $(LLVM_PROJECT_TAGGED_PIPELINE_ID)
    MIOpen: $(MIOpen_TAGGED_PIPELINE_ID)
    MIVisionX: $(MIVISIONX_TAGGED_PIPELINE_ID)
    omniperf: $(OMNIPERF_TAGGED_PIPELINE_ID)
    rccl: $(RCCL_TAGGED_PIPELINE_ID)
    rdc: $(RDC_TAGGED_PIPELINE_ID)
    rocAL: $(ROCAL_TAGGED_PIPELINE_ID)
    rocALUTION: $(ROCALUTION_TAGGED_PIPELINE_ID)
    rocBLAS: $(ROCBLAS_TAGGED_PIPELINE_ID)
    ROCdbgapi: $(ROCDBGAPI_TAGGED_PIPELINE_ID)
    rocDecode: $(ROCDECODE_TAGGED_PIPELINE_ID)
    rocFFT: $(ROCFFT_TAGGED_PIPELINE_ID)
    ROCgdb: $(ROCGDB_TAGGED_PIPELINE_ID)
    rocm-cmake: $(ROCM_CMAKE_TAGGED_PIPELINE_ID)
    rocm-core: $(ROCM_CORE_TAGGED_PIPELINE_ID)
    rocm-examples: $(ROCM_EXAMPLES_TAGGED_PIPELINE_ID)
    rocminfo: $(ROCMINFO_TAGGED_PIPELINE_ID)
    rocMLIR: $(ROCMLIR_TAGGED_PIPELINE_ID)
    ROCmValidationSuite: $(ROCMVALIDATIONSUITE_TAGGED_PIPELINE_ID)
    rocm_bandwidth_test: $(ROCM_BANDWIDTH_TEST_TAGGED_PIPELINE_ID)
    rocm_smi_lib: $(ROCM_SMI_LIB_TAGGED_PIPELINE_ID)
    rocPRIM: $(ROCPRIM_TAGGED_PIPELINE_ID)
    rocprofiler-register: $(ROCPROFILER_REGISTER_TAGGED_PIPELINE_ID)
    rocprofiler-sdk: $(ROCPROFILER_SDK_TAGGED_PIPELINE_ID)
    rocprofiler: $(ROCPROFILER_TAGGED_PIPELINE_ID)
    rocPyDecode: $(ROCPYDECODE_TAGGED_PIPELINE_ID)
    ROCR-Runtime: $(ROCR_RUNTIME_TAGGED_PIPELINE_ID)
    rocRAND: $(ROCRAND_TAGGED_PIPELINE_ID)
    rocr_debug_agent: $(ROCR_DEBUG_AGENT_TAGGED_PIPELINE_ID)
    rocSOLVER: $(ROCSOLVER_TAGGED_PIPELINE_ID)
    rocSPARSE: $(ROCSPARSE_TAGGED_PIPELINE_ID)
    ROCT-Thunk-Interface: $(ROCT_THUNK_INTERFACE_TAGGED_PIPELINE_ID)
    rocThrust: $(ROCTHRUST_TAGGED_PIPELINE_ID)
    roctracer: $(ROCTRACER_TAGGED_PIPELINE_ID)
    rocWMMA: $(ROCWMMA_TAGGED_PIPELINE_ID)
    rpp: $(RPP_TAGGED_PIPELINE_ID)
# set to true if you're calling this template file multiple files in same pipeline
# only leave last call false to optimize sequence
- name: skipLibraryLinking
  type: boolean
  default: false
# set to true if llvm-project is not downloaded in a particular call
# or if you just don't want the symlink
- name: skipLlvmSymlink
  type: boolean
  default: false
# some ROCm components can specify GPU target and this will affect downloads
- name: gpuTarget
  type: string
  default: ''
# array of ROCm components that can specify GPU target or have dependency of such a component
# these components would have parallel build jobs per GPU target so they produce multiple artifacts
# only download artifact tied to the GPU target
- name: componentsWithGPUTarget
  type: object
  default:
    - AMDMIGraphX
    - composable_kernel
    - hipBLASLt
    - hipCUB
    - hipFFT
    - hipRAND
    - hipSPARSELt
    - hipTensor
    - rccl
    - rocALUTION
    - rocBLAS
    - rocFFT
    - rocm-examples
    - rocPRIM
    - rocprofiler-sdk
    - rocprofiler
    - rocPyDecode
    - rocRAND
    - rocSOLVER
    - rocSPARSE
    - rocThrust
    - roctracer
    - rocWMMA
    - rpp
# list below do not have flag for gpu target but have dependencies of components that do, so build separately per gpu target
    - hipBLAS
    - hipSOLVER
    - hipSPARSE
    - MIOpen
    - MIVision
    - omniperf
    - rocAL
    - ROCmValidationSuite

steps:
# assuming artifact-download.yml template file in same directory
# for the case where rocm dependency item in list has a colon (:)
# assume it is of the format of componentName:fileFilter
# fileFilter could contain both a subcomponent name or gpu name separated by asterisks
# gpu name will be specified by parameters.gpuTarget for components that are in componentsWithGPUTarget
# e.g., gfx942 to only download artifacts from component for this gpu if applicable
- ${{ each dependency in parameters.dependencyList }}:
  - ${{ if contains(dependency, ':') }}:
    - template: artifact-download.yml
      parameters:
        componentName: ${{ split(dependency, ':')[0] }}
        extractToMnt: ${{ parameters.extractToMnt }}
        ${{ if eq(parameters.dependencySource, 'staging') }}:
          pipelineId: ${{ parameters.stagingPipelineIdentifiers[ split(dependency, ':')[0] ] }}
          latestFromBranch: ${{ parameters.latestFromBranch }}
        ${{ elseif eq(parameters.dependencySource, 'mainline') }}:
          pipelineId: ${{ parameters.stagingPipelineIdentifiers[ split(dependency, ':')[0] ] }}
          useMainlineBranch: true
          latestFromBranch: ${{ parameters.latestFromBranch }}
        ${{ elseif eq(parameters.dependencySource, 'tag-builds') }}:
          pipelineId: ${{ parameters.taggedPipelineIdentifiers[ split(dependency, ':')[0] ] }}
          latestFromBranch: false
        ${{ if containsValue( parameters.componentsWithGPUTarget, split(dependency, ':')[0] ) }}:
          fileFilter: "${{ split(dependency, ':')[1] }}*${{ parameters.gpuTarget }}"
        ${{ else }}:
          fileFilter: ${{ split(dependency, ':')[1] }}
# no colon (:) found in this item in the list
  - ${{ else }}:
    - template: artifact-download.yml
      parameters:
        componentName: ${{ dependency }}
        extractToMnt: ${{ parameters.extractToMnt }}
        ${{ if eq(parameters.dependencySource, 'staging') }}:
          pipelineId: ${{ parameters.stagingPipelineIdentifiers[dependency] }}
          latestFromBranch: ${{ parameters.latestFromBranch }}
        ${{ elseif eq(parameters.dependencySource, 'mainline') }}:
          pipelineId: ${{ parameters.stagingPipelineIdentifiers[dependency] }}
          useMainlineBranch: true
          latestFromBranch: ${{ parameters.latestFromBranch }}
        ${{ elseif eq(parameters.dependencySource, 'tag-builds') }}:
          pipelineId: ${{ parameters.taggedPipelineIdentifiers[dependency] }}
          latestFromBranch: false
        ${{ if containsValue( parameters.componentsWithGPUTarget, dependency ) }}:
          fileFilter: ${{ parameters.gpuTarget }}
# fixed case only accepts one component at a time, so no array input
- ${{ if eq(parameters.dependencySource, 'fixed') }}:
  - template: artifact-download.yml
    parameters:
      componentName: ${{ parameters.fixedComponentName }}
      pipelineId: ${{ parameters.fixedPipelineIdentifier }}
      latestFromBranch: false
      extractToMnt: ${{ parameters.extractToMnt }}
# Set link to redirect llvm folder
- ${{ if eq(parameters.skipLlvmSymlink, false) }}:
  - task: Bash@3
    displayName: Symlink from rocm/llvm to rocm/lib/llvm
    inputs:
      targetType: inline
      script: sudo ln -s $(Agent.BuildDirectory)/rocm/llvm $(Agent.BuildDirectory)/rocm/lib/llvm
  - task: Bash@3
    displayName: Symlink executables from rocm/llvm/bin to rocm/bin
    inputs:
      targetType: inline
      script: |
        for file in amdclang amdclang++ amdclang-cl amdclang-cpp amdflang amdlld aompcc mygpu mycpu offload-arch; do
          sudo ln -s $(Agent.BuildDirectory)/rocm/llvm/bin/$file $(Agent.BuildDirectory)/rocm/bin/$file
        done
- task: Bash@3
  displayName: 'List downloaded ROCm files'
  inputs:
    targetType: inline
    ${{ if eq(parameters.extractToMnt, true) }}:
      script: ls -1R /mnt/rocm
    ${{ else }}:
      script: ls -1R $(Agent.BuildDirectory)/rocm
- ${{ if eq(parameters.skipLibraryLinking, false) }}:
  - task: Bash@3
    displayName: 'Link ROCm shared libraries'
    inputs:
      targetType: inline
# OS ignores if the ROCm lib folder shows up more than once
      ${{ if eq(parameters.extractToMnt, true) }}:
        script: |
          echo /mnt/rocm/lib | sudo tee /etc/ld.so.conf.d/rocm-ci.conf
          echo /mnt/rocm/llvm/lib | sudo tee -a /etc/ld.so.conf.d/rocm-ci.conf
          sudo cat /etc/ld.so.conf.d/rocm-ci.conf
          sudo ldconfig -v
          ldconfig -p
      ${{ else }}:
        script: |
          echo $(Agent.BuildDirectory)/rocm/lib | sudo tee /etc/ld.so.conf.d/rocm-ci.conf
          echo $(Agent.BuildDirectory)/rocm/llvm/lib | sudo tee -a /etc/ld.so.conf.d/rocm-ci.conf
          sudo cat /etc/ld.so.conf.d/rocm-ci.conf
          sudo ldconfig -v
          ldconfig -p
